<?php
/**
 * sample code module for Steve Zipfel <steve@webrepublic.ca>
 * Purpose: Cnnects to a web service to pull in data for a custom form.
 **/

/**
 *  Implements hook_permission().
 */
function sz_test_permission() {
  return array(
    'administer test module settings' => array(
      'title' => t('Change test module settings'),
    ),
  );
}

/**
 * @return array
 */
function sz_test_menu() {

  $items = array();

  $items['admin/config/sz_test/settings'] = array(
    'title' => t('Steve Zipfel\'s sample administration page'),
    'description' => t('Administer settings for SZ test module'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('sz_test_admin_form'),
    'access arguments' => array('administer Steve Zipfel\'s sample module settings'),
    'file' => 'includes/sz_test.admin.inc',
    'file path' => drupal_get_path('module', 'sz_test')
  );


  $items['vote'] = array(
    'title' => t('Vote for a bands best song'),
    'description' => t('Vote for a bands best song form'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('sz_test_vote_form'),
    'access arguments' =>  array('access content')
  );


  $items['vote-result/%/%/%'] = array(
    'title arguments' => array(1),
    'title callback' => 'sz_test_vote_result_get_title',
    'page callback' => 'sz_test_vote_result',
    'page arguments' => array(1,2,3),
    'access arguments' => array('access content'),
    'access callback' => TRUE,
  );


  return $items;
}

function sz_test_vote_result_get_title($name) {

  return t('Thank you for voting, @name!', array(
    '@name' => $name
  ));
}

/**
 * Main vote form
 *
 * @param $form
 * @param $form_state
 * @return mixed
 */
function sz_test_vote_form($form, &$form_state) {

  //setup the webservice class to get the bands and songs when required
  include_once(drupal_get_path('module', 'sz_test') . '/tools/rest.php');
  $web_service = new WebService();
  $bands = $web_service->get_bands();
  $access = FALSE;

  $form['select_band'] = array(
    '#type' => 'select',
    '#title' => t('Select a band'),
    '#options' => $bands,
    '#ajax' => array(
      'event'=>'change',
      'callback' =>'sz_test_get_songs',
      'wrapper' => 'form-wrapper',
    ),
    '#default_value' => t('Choose an band'),
    '#required' => TRUE,
  );


  $form['ajax']['wrapper'] = array(
    '#prefix' => '<div id="form-wrapper">',
    '#suffix' => '</div>',
  );

  $songs = array(t('Choose a song'));
  if (isset($form_state['values']['select_band'])) {
    $songs = $web_service->get_songs($form_state['values']['select_band']);
    $access = TRUE;
  }

  $form['ajax']['wrapper']['select_song'] = array(
    '#title' => t('Song'),
    '#type' => 'select',
    '#access' => $access,
    '#options' => $songs,
    '#default_value' => t('Choose a song'),
    '#required' => TRUE,
  );

  $form['ajax']['wrapper']['voter_name'] = array(
    '#type' => 'textfield',
    '#title' => t('Your name'),
    '#access' => $access,
    '#required' => TRUE,
  );

  $form['ajax']['wrapper']['voter_email'] = array(
    '#type' => 'textfield',
    '#title' => t('Your email'),
    '#access' => $access,
    '#required' => TRUE,
  );

  $form['#validate'][] = 'sz_test_vote_form_validate';

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Vote'),
    //'#disabled' => TRUE
  );

  return $form;
}

/**
 * Updates the results database.
 *
 * @param $form
 * @param $form_state
 * @throws \Exception
 */
function sz_test_vote_form_submit($form, &$form_state) {

  $form_state['redirect'] = 'vote-result/' . $form_state['values']['voter_name']. '/' . $form_state['values']['select_band'] . '/' . $form_state['values']['select_song'];
  db_insert('sz_test_results')
  ->fields(array(
    'name' =>  $form_state['values']['voter_name'],
    'email' => $form_state['values']['voter_email'],
    'song' => $form_state['values']['select_song'],
    'band' => $form_state['values']['select_band'],
    'ip_address' => $_SERVER['REMOTE_ADDR']
  ))
    ->execute();

}

/**
 * Validate the incoming form values.
 *
 * @param $form
 * @param $form_state
 */
function sz_test_vote_form_validate($form, &$form_state) {

  if($form_state['values']['select_band'] == "0") {
    form_set_error('select_band', t('Band is required.'));
  }

  if($form_state['values']['select_song'] == "0") {
    form_set_error('select_song', t('Song is required.'));
  }

  if (($form_state['values']['voter_email'] != NULL) && (!filter_var($form_state['values']['voter_email'],  FILTER_VALIDATE_EMAIL))) {
    form_set_error('voter-email', t('The email address ' .$form_state['values']['voter_email'] . ' is invalid. Please enter a valid email.' ));
  }

}

/**
 * For enabling the rest of the form once the band has been selected.
 *
 * @param $form
 * @param $form_state
 * @return mixed
 */
function sz_test_get_songs($form, $form_state) {
  // Return the dropdown list including the wrapper
  return $form['ajax']['wrapper'];
}

/**
 * Get the details of the vote and pss them to the template.
 *
 * @param $name
 * @param $band
 * @param $song
 * @return string
 * @throws \Exception
 */
function sz_test_vote_result($name, $band, $song) {

  $output = array(
    'name' => $name,
    'song' => $song,
    'band' => $band,
    'results' => _sz_test_get_results($band),
  );

  return theme('sz_test', array('results' => $output));

}

/**
 * Declare the theme / template
 *
 * @return array
 */
function sz_test_theme() {

  return array(
    'sz_test' => array (
      'template' => 'vote-results',
      'path' => drupal_get_path('module', 'sz_test') . '/templates/custom',
      'variables' => array(
        'results' => NULL,
      ),
    ),
  );

}

/**
 * Get the current standings from the sz_test_results table.
 *
 * @param $band
 * @return mixed
 */
function _sz_test_get_results($band) {

  $results = db_query("SELECT song,COUNT(*) as total from {sz_test_results} WHERE band = :BAND  GROUP BY song ORDER BY total DESC", array(':BAND' => $band));
  foreach($results as $row) {
    $result[$row->song] = $row->total;

  }
  return $result;


}

// end
